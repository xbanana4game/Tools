#DOWNLOAD_SECTIONS
#INPUT_MODE
#RESOLUTION


##########################################################################
# SETTINGS
##########################################################################
#--ffmpeg-location "C:\App\ffmpeg-master-latest-win64-gpl\bin"
--console-title
#--print %(formats.:.format_id)s
#-v
#-F


##########################################################################
# Download Options
##########################################################################
#--concurrent-fragments 3
--retries infinite
#--file-access-retries infinite
--fragment-retries infinite
--retry-sleep fragment:exp=1:20
#--retry-sleep linear=1::2
#--socket-timeout 600
#--max-filesize 500M


##########################################################################
# INPUT
##########################################################################
#--download-sections "*10:15-inf"
#--download-sections "*0:00:00-0:00:00"
#--download-sections "game"
#WARNING: webm doesn't support embedding a thumbnail, mkv will be used
#-S "res:144,ext:mp4,+br,+size"
#-S "res:144,ext:mp4,fps:15"
#-S "res:160,ext:mp4"
#-S "res:180,ext:mp4"
#-S "res:240,ext:mp4"
#-S "res:360,ext:mp4"
#-S "res:480,ext:mp4"
#-S "res:720,ext:mp4"
#-S "res:720,ext:mp4,abr~64,+size"
#-S "ext:mp4,ext:m4a,codec:avc:m4a"
# res:%RESOLUTION%
#-S "ext:mp4,ext:m4a,abr~128,+br"
#-S +size,+br,+res,+fps
#vcodec: Video Codec (av01 > vp9.2 > vp9 > h265 > h264 > vp8 > h263 > theora > other)
#-S "res:144,vcodec:vp9,ext:mp4,+abr,+size"
# (https/ftps > http/ftp > m3u8_native > m3u8 > http_dash_segments ...)
#-S "proto"

#LOW
-f "bestvideo+bestaudio"
-S "res:144,+vbr,+abr"
#-S "res:144,ext:mp4,ext:m4a,+vbr,+abr"

#QUALITY TEST
#-f 602+139,394+139
#-f 602,269,160,603,394,139
#480
#-f 397,244,135,140
#720
#-f 232,136,140
#--keep-video


##########################################################################
# OUTPUT
##########################################################################
#-f "bv,ba"
# Download the best mp4 video available, or the best video if no mp4 available
# $ yt-dlp -f "bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4] / bv*+ba/b"
# Download and merge the best video-only format and the best audio-only format,
# or download the best combined format if video-only format is not available
# $ yt-dlp -f "bv+ba/b"
# Download best format that contains video,
# and if it doesn't already have an audio stream, merge it with best audio-only format
# $ yt-dlp -f "bv*+ba/b"
-f "bestvideo+bestaudio/b"
#-f ba[format_note!*=drc]
#-f "bv[format_note!*=THROTTLED]+ba[format_note!*=THROTTLED]"
--merge-output-format mp4
--write-description


##########################################################################
# OUTPUT
##########################################################################
-P "%VIDEO_OUTPUT_DIR%"
#-P "%USERPROFILE%\Videos\yt-dlp"
-o "%(title)s[%(id)s][%(uploader)s](%(resolution)s).%(ext)s"
#-o "%(upload_date>%Y-%m-%d)s %(id)s(%(protocol)s %(format_id)s %(width)sx%(height)s %(fps)sfps %(vcodec)s %(vbr)dkbps+%(acodec)s %(abr)dkbps).%(ext)s"
#-o "Sample %(id)s(%(format_id)s %(formats.:.format_id)s).%(ext)s"
#format or format_note 20XXX ABCDEFG(720p + audio).mp4
#-o "%(upload_date>%Y-%m-%d)s %(id)s(%(format)s).%(ext)s"


##########################################################################
# Mp4tag
##########################################################################
#--write-info-json
--add-metadata

# ALBUM
#--parse-metadata '%(creator|Unknown)s:%(meta_album)s'
#--parse-metadata '%(uploader)s:%(meta_album)s'
#--parse-metadata '%(meta_artist|)s:%(meta_album)s'

# TITLE
#--parse-metadata post_process:"%(title)s(%(protocol)s %(format_id)s %(width)sx%(height)s %(fps)sfps %(vcodec)s %(vbr)dkbps %(acodec)s %(abr)dkbps):%(meta_title)s"
#--parse-metadata '%(title)s:%(meta_title)s'

# YEAR
#--parse-metadata '%(upload_date>%Y-%m-%d)s:%(meta_date)s'
#--parse-metadata '%(epoch>%Y-%m-%d)s:%(meta_date)s'

# ARTIST
#--parse-metadata '%(uploader)s:%(meta_artist)s'

# GENRE
#--parse-metadata '%(categories.0)s:%(meta_genre)s'
#--parse-metadata '%(webpage_url_domain)s:%(meta_genre)s'

# TVSEASON(Number)
#--parse-metadata 'season_number:%(meta_season_number)s'

# TVSHOW
#--parse-metadata '%(webpage_url)s:%(meta_show)s'
#--parse-metadata '%(display_id)s:%(meta_show)s'

# TVEPISODEID
#--parse-metadata '%(id)s:%(meta_episode_id)s'

# TVEPISODE(Number)
#--parse-metadata 'episode_sort:%(meta_episode_sort)s'

# COMMENT
#--parse-metadata '%(display_id)s:%(meta_comment)s'

# PODCASTDESC
#--parse-metadata 'synopsis:%(meta_synopsis)s'

# DESCRIPTION
#--parse-metadata '%(chapters.0.title|)s,%(chapters.1.title|)s:%(meta_description)s'
#--parse-metadata 'description:%(meta_description)s'

# TRACK(Number)
#--parse-metadata 'track:%(meta_track)s'

# ALBUMARTIST
#--parse-metadata 'album_artist:%(meta_album_artist)s'

# DISCNUMBER(Number)
#--parse-metadata 'disc:%(meta_disc)s'

# COMPOSER
--parse-metadata 'field composer:%(meta_composer)s'

# NO FIELD
#--parse-metadata 'language:%(meta_language)s'
#--parse-metadata '%(webpage_url)s:%(meta_purl)s'


##########################################################################
# Thumbnail
##########################################################################
--embed-thumbnail  
#--write-thumbnail
#--output "thumbnail:%USERPROFILE%\Pictures\yt-dlp-thumbsnails\%(id)s.%(ext)s"


##########################################################################
# Chapters
##########################################################################
--embed-chapters

##########################################################################
# Subtitle 
##########################################################################
--write-subs
--sub-langs ja

